Expression
    : Biconditional
    ;

Biconditional
    : Biconditional '<=>' Conditional
    | Conditional
    ;

Conditional
    : Conditional '=>' Disjunction
    | Disjunction
    ;

Disjunction
    : Disjunction '|' Conjunction
    | Conjunction
    ;

Conjunction
    : Conjunction '&' Negation
    | Negation
    ;

Negation
    : '!' Basic
    | Basic;

Basic
    : variable
    | '(' Expression ')'


Tokens:
a-z : variables
<=>
=>
|
&
(    
)


1. If the current token is a '(', add a new node as the left child of the current node, and descend to the left child.

2. If the current token is in the list ['<=>','=>','|','&'], set the root value of the current node to the operator 
   represented by the current token. Add a new node as the right child of the current node and descend to the right child.

3. If the current token is '!', set the root to the value of the current node to '!'. Add a new node as the child of the
   current node and descend to the child.

4. If the current token is a variable, set the root value of the current node to the number and return to the parent.

5. If the current token is a ')', go to the parent of the current node.

